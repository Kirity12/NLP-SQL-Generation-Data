SELECT count(*) FROM actor	
SELECT Name FROM actor ORDER BY Name ASC	l
SELECT Name FROM actor WHERE Age != 20	
SELECT Character FROM actor ORDER BY age DESC	
SELECT Name FROM musical WHERE Nominee  =  "Bob Fosse"	
SELECT DISTINCT Nominee FROM musical WHERE Award != "Tony Award"	
SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2	
SELECT Character ,  Duration FROM actor	
SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1	
SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID	
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  "The Phantom of the Opera"	
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC	
SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID
SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3	
SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee	
SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"	
SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1	
SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1	
SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)	
SELECT date  FROM weather  WHERE max_temperature_f > 85;
SELECT name FROM station WHERE lat < 37.5;  
SELECT avg(lat), avg(long) FROM station WHERE city = 'San Jose' GROUP BY id;
SELECT id FROM trip LIMIT 1 ORDER BY duration ASC 
SELECT sum(duration), max(duration) FROM trips WHERE bikeid = 636  
SELECT DISTINCT name  FROM station s JOIN status st ON s.id=st.station_id WHERE bikes_available = 7   
SELECT COUNT(DISTINCT date) FROM weather WHERE mean_humidity>50 AND mean_visibility_miles>8;  
SELECT max_temperature_f, date, zip_code FROM weather WHERE max_temperature_f > 80;  
SELECT trip.id, weather.date FROM trip INNER JOIN weather ON trip.start_date = weather.date WHERE weather.mean_temperature_f > 60 ORDER BY weather.date LIMIT 10;
SELECT zip_code, COUNT(*) as count  FROM weather  WHERE max_wind_speed_mph=25  GROUP BY zip_code  HAVING count>=1;
SELECT t.id,s.installation_date from trip t join station s on t.end_station_id=s.id;  
SELECT COUNT(*) FROM station JOIN trip ON station.id = trip.start_station_id WHERE station.city <> 'San Francisco'  
SELECT COUNT(DISTINCT bike_id) FROM trip  
SELECT date from weather where zip_code = 94107 and events is null;  
SELECT name, lat, city FROM station WHERE lat = (SELECT MIN(lat) FROM station)  
SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
SELECT city, COUNT(1) as station_count FROM station GROUP BY city HAVING COUNT(1) >= 15  
SELECT station.id, station.name FROM station JOIN (SELECT start_station_id, count(*) as cnt FROM trip WHERE start_station_id IS NOT NULL GROUP BY start_station_id) a ON station.id = a.start_station_id WHERE a.cnt >= 200 ORDER BY a.cnt DESC  
SELECT city, MAX(lat), COUNT(id) FROM station GROUP BY city ORDER BY MAX(lat) DESC  
SELECT DISTINCT date,cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;  
SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3; 
SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1
SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15
SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200
SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC
SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5
SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3
SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id
SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id
SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1
SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12
SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id
SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code
SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1
SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10
SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1
SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7
SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70
SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)
SELECT DISTINCT cloud_cover, COUNT(*) AS count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;  
SELECT AVG(bikes_available) FROM status s  JOIN station st ON s.station_id = st.id WHERE st.city != 'Palo Alto'
SELECT avg(long) FROM station WHERE id in (SELECT station_id              FROM status              WHERE bikes_available < 10)               
SELECT date, zip_code FROM weather WHERE min_dew_point_f = (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107);  
SELECT w.zip_code FROM weather w GROUP BY w.zip_code HAVING AVG(w.mean_visibility_miles) < 10  
SELECT * FROM station WHERE id NOT IN (SELECT station_id FROM status WHERE bikes_available >=10 AND city='SJ')  
SELECT COUNT(t.id) FROM station s JOIN trip t ON s.id = t.start_station_id WHERE s.city = 'Mountain View' AND t.end_station_id IN (SELECT id                          FROM station                          WHERE city = 'Palo Alto')
SELECT DISTINCT start_station_name FROM trip WHERE duration < 100  
SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 ;
SELECT city, MAX(lat) FROM station GROUP BY city;  
SELECT id,start_station_name,end_station_name from trip join weather on trip.id=weather.id;  
SELECT catalog_entry_name FROM Catalog_Contents;
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_id)>3;
SELECT min(price_in_euros), avg(price_in_euros) from Catalog_Contents;
SELECT catalog_entry_name FROM Catalog_Contents JOIN (SELECT MAX(height) AS max_height FROM Catalog_Contents) AS max_height_table ON Catalog_Contents.height = max_height_table.max_height;
SELECT catalog_entry_name FROM Catalog_Contents WHERE capacity = ( SELECT MIN(capacity) FROM Catalog_Contents );  
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE product_stock_number LIKE "2%"
SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = 8;
SELECT catalog_entry_name FROM Catalog_Contents WHERE length < '3' OR height > '5'
SELECT attribute_name, attribute_id FROM Attribute_Definitions WHERE attribute_value = 0;  
SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700
SELECT catalog_publisher,count(catalog_publisher) FROM Catalogs c GROUP BY c.catalog_publisher HAVING count(catalog_publisher) = ( SELECT max(Count(catalog_publisher)) FROM Catalogs GROUP BY catalog_publisher);   
SELECT catalog_level_name FROM Catalog_Structure WHERE catalog_ level_number IN   (SELECT catalog_level_number    FROM Catalog_Contents    GROUP BY catalog_level_number    HAVING MIN(price_in_dollars)) ;}
SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'
SELECT catalog_name, catalog_entry_id FROM Catalogs JOIN Catalog_Contents ON catalog_id=catalog_level_number GROUP BY catalog_name ORDER BY count(catalog_entry_id) DESC LIMIT 1 SELECT catalog_entry_name FROM Catalog_Contents JOIN Catalogs ON catalog_level_number=catalog_id
SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(date_of_latest_revision)>1;
SELECT COUNT(*) FROM `Catalog_Contents`;
SELECT * FROM Catalog_Contents WHERE next_entry_id > 8
SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 and 10;  
SELECT catalog_publisher FROM Catalogs WHERE catalog_publisher LIKE '%Murray%'
SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1	product_catalog
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)	product_catalog
SELECT count(*) FROM head WHERE age  >  56
SELECT name FROM head WHERE born_state != 'California'
SELECT count(DISTINCT temporary_acting) FROM management
SELECT name ,  born_state ,  age FROM head ORDER BY age
SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department
SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'
SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'
SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'
SELECT COUNT (DISTINCT d.Department_ID) FROM department d WHERE NOT EXISTS  (SELECT h.Name FROM head h INNER JOIN management m ON h.head_ID = m.head_ID WHERE d.Department_ID = m.department_ID)
SELECT SUM(DISTINCT "Book_ID") FROM "book"; 
SELECT * FROM book ORDER BY Issues ASC;  
SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;
SELECT Publication_Date FROM publication ORDER BY Price DESC
SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)>1  
SELECT COUNT(DISTINCT "Publication_Date") FROM "publication" 
SELECT title, issues FROM book;
SELECT publication.Publication_Date  FROM publication  ORDER BY Price  LIMIT 3
SELECT DISTINCT Writer FROM book INNER JOIN publication ON book.Book_ID=publication.Book_ID WHERE Price>4000000;
SELECT Publisher, COUNT(*) AS No_of_publication FROM publication GROUP BY Publisher;  
SELECT publication_date, COUNT(*) FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1