{
    "department_management": {
        "easy": [
            {
                "question": "How many heads of the departments are older than 56 ?",
                "query": "SELECT count(*) FROM head WHERE age  >  56"
            },
            {
                "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
                "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
            },
            {
                "question": "What are the names of the heads who are born outside the California state?",
                "query": "SELECT name FROM head WHERE born_state != 'California'"
            },
            {
                "question": "What are the names of the states where at least 3 heads were born?",
                "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3"
            },
            {
                "question": "How many acting statuses are there?",
                "query": "SELECT count(DISTINCT temporary_acting) FROM management"
            }
        ],
        "medium": [
            {
                "question": "List the name, born state and age of the heads of departments ordered by age.",
                "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age"
            },
            {
                "question": "List the creation year, name and budget of each department.",
                "query": "SELECT creation ,  name ,  budget_in_billions FROM department"
            },
            {
                "question": "What are the maximum and minimum budget of the departments?",
                "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
            },
            {
                "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
                "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
            },
            {
                "question": "What are the distinct ages of the heads who are acting?",
                "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
            },
            {
                "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
                "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
            },
            {
                "question": "Which head's name has the substring 'Ha'? List the id and name.",
                "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
            }
        ],
        "hard": [
            {
                "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
                "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
            },
            {
                "question": "In which year were most departments established?",
                "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
            }
        ],
        "extra": [
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);"
            },
            {
                "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
                "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"
            }
        ]
    },
    "farm": {
        "easy": [
            {
                "question": "How many farms are there?",
                "query": "SELECT count(*) FROM farm"
            },
            {
                "question": "Count the number of farms.",
                "query": "SELECT count(*) FROM farm"
            },
            {
                "question": "List the total number of horses on farms in ascending order.",
                "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
            },
            {
                "question": "What is the total horses record for each farm, sorted ascending?",
                "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
            },
            {
                "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
                "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"
            },
            {
                "question": "Return the hosts of competitions for which the theme is not Aliens?",
                "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"
            },
            {
                "question": "What are the themes of farm competitions sorted by year in ascending order?",
                "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
            },
            {
                "question": "Return the themes of farm competitions, sorted by year ascending.",
                "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
            },
            {
                "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
                "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
            },
            {
                "question": "Give the average number of working horses on farms with more than 5000 total horses.",
                "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
            },
            {
                "question": "How many different statuses do cities have?",
                "query": "SELECT count(DISTINCT Status) FROM city"
            },
            {
                "question": "Count the number of different statuses.",
                "query": "SELECT count(DISTINCT Status) FROM city"
            },
            {
                "question": "List official names of cities in descending order of population.",
                "query": "SELECT Official_Name FROM city ORDER BY Population DESC"
            },
            {
                "question": "What are the official names of cities, ordered descending by population?",
                "query": "SELECT Official_Name FROM city ORDER BY Population DESC"
            },
            {
                "question": "Show the census ranking of cities whose status are not \"Village\".",
                "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
            },
            {
                "question": "What are the census rankings of cities that do not have the status \"Village\"?",
                "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
            }
        ],
        "medium": [
            {
                "question": "What are the maximum and minimum number of cows across all farms.",
                "query": "SELECT max(Cows) ,  min(Cows) FROM farm"
            },
            {
                "question": "Return the maximum and minimum number of cows across all farms.",
                "query": "SELECT max(Cows) ,  min(Cows) FROM farm"
            },
            {
                "question": "List the official name and status of the city with the largest population.",
                "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"
            },
            {
                "question": "What is the official name and status of the city with the most residents?",
                "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"
            },
            {
                "question": "Show the years and the official names of the host cities of competitions.",
                "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"
            },
            {
                "question": "Give the years and official names of the cities of each competition.",
                "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"
            },
            {
                "question": "Show the official names of the cities that have hosted more than one competition.",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
            },
            {
                "question": "What are the official names of cities that have hosted more than one competition?",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
            },
            {
                "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
            },
            {
                "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
            },
            {
                "question": "Please show the different statuses of cities and the average population of cities with each status.",
                "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
            },
            {
                "question": "What are the statuses and average populations of each city?",
                "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
            },
            {
                "question": "Please show the different statuses, ordered by the number of cities that have each.",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
            },
            {
                "question": "Return the different statuses of cities, ascending by frequency.",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
            },
            {
                "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
                "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
            },
            {
                "question": "What are the official names of cities that have population over 1500 or less than 500?",
                "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
            }
        ],
        "extra": [
            {
                "question": "Show the status of the city that has hosted the greatest number of competitions.",
                "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "What is the status of the city that has hosted the most competitions?",
                "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
            }
        ],
        "hard": [
            {
                "question": "List the most common type of Status across cities.",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "What is the most common status across all cities?",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "List the official names of cities that have not held any competition.",
                "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
            },
            {
                "question": "What are the official names of cities that have not hosted a farm competition?",
                "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
            },
            {
                "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
                "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
            },
            {
                "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
                "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
            }
        ]
    },
    "student_assessment": {
        "extra": [
            {
                "question": "which course has most number of registered students?",
                "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the name of the course with the most registered students?",
                "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is detail of the student who registered the most number of courses?",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What are the details of the student who registered for the most number of courses?",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
            }
        ],
        "hard": [
            {
                "question": "what is id of students who registered some courses but the least number of courses in these students?",
                "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
            },
            {
                "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
                "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
            },
            {
                "question": "List the id of students who never attends courses?",
                "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            },
            {
                "question": "What are the  ids of every student who has never attended a course?",
                "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            },
            {
                "question": "What is detail of the student who most recently registered course?",
                "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
            },
            {
                "question": "What details do we have on the students who registered for courses most recently?",
                "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
            },
            {
                "question": "How many registed students do each course have? List course name and the number of their registered students?",
                "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
            },
            {
                "question": "For each course id, how many students are registered and what are the course names?",
                "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
            },
            {
                "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
                "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
            },
            {
                "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
                "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
            },
            {
                "question": "What is the id of the student who most recently registered course 301?",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
            },
            {
                "question": "What are the ids of the students who registered for course 301 most recently?",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
            },
            {
                "question": "What are the id of students who registered courses or attended courses?",
                "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
            },
            {
                "question": "What are the ids of the students who either registered or attended a course?",
                "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
            },
            {
                "question": "Find the id of courses which are registered or attended by student whose id is 121?",
                "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
            },
            {
                "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
                "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
            },
            {
                "question": "What are all info of students who registered courses but not attended courses?",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            },
            {
                "question": "What are all details of the students who registered but did not attend any course?",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            },
            {
                "question": "List the id of students who registered course statistics in the order of registration date.",
                "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
            },
            {
                "question": "What are the ids of the students who registered course statistics by order of registration date?",
                "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
            },
            {
                "question": "List the id of students who attended  statistics courses in the order of attendance date.",
                "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
            },
            {
                "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
                "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
            }
        ],
        "medium": [
            {
                "question": "what are the first name and last name of all candidates?",
                "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
            },
            {
                "question": "How many students attend course English?",
                "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
            },
            {
                "question": "How many students are attending English courses?",
                "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
            },
            {
                "question": "How many courses do the student whose id is 171 attend?",
                "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
            },
            {
                "question": "How many courses does the student with id 171 actually attend?",
                "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
            },
            {
                "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
                "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
            },
            {
                "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
                "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
            },
            {
                "question": "Find id of the candidate who most recently accessed the course?",
                "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
            },
            {
                "question": "What is the id of the candidate who most recently accessed the course?",
                "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
            },
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
            },
            {
                "question": "Find distinct cities of address of students?",
                "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
            },
            {
                "question": "What are the different cities where students live?",
                "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
            }
        ],
        "easy": [
            {
                "question": "List the id of students who attended some courses?",
                "query": "SELECT student_id FROM student_course_attendance"
            },
            {
                "question": "What are the ids of all students who have attended at least one course?",
                "query": "SELECT student_id FROM student_course_attendance"
            },
            {
                "question": "Find id of candidates whose assessment code is \"Pass\"?",
                "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
            },
            {
                "question": "What are the ids of the candidates that have an outcome code of Pass?",
                "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
            },
            {
                "question": "What are the id of students who registered course 301?",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
            },
            {
                "question": "What are the ids of the students who registered for course 301?",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
            },
            {
                "question": "Find distinct cities of addresses of people?",
                "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
            },
            {
                "question": "What are the different cities where people live?",
                "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
            },
            {
                "question": "List the names of courses in alphabetical order?",
                "query": "SELECT course_name FROM courses ORDER BY course_name"
            },
            {
                "question": "What are the names of the courses in alphabetical order?",
                "query": "SELECT course_name FROM courses ORDER BY course_name"
            },
            {
                "question": "List the first names of people in alphabetical order?",
                "query": "SELECT first_name FROM people ORDER BY first_name"
            },
            {
                "question": "What are the first names of the people in alphabetical order?",
                "query": "SELECT first_name FROM people ORDER BY first_name"
            }
        ]
    },
    "bike_1": {
        "easy": [
            {
                "question": "Give me the dates when the max temperature was higher than 85.",
                "query": "SELECT date FROM weather WHERE max_temperature_f  >  85"
            },
            {
                "question": "What are the dates with a maximum temperature higher than 85?",
                "query": "SELECT date FROM weather WHERE max_temperature_f  >  85"
            },
            {
                "question": "What are the names of stations that have latitude lower than 37.5?",
                "query": "SELECT name FROM station WHERE lat  <  37.5"
            },
            {
                "question": "What are the names of all stations with a latitude smaller than 37.5?",
                "query": "SELECT name FROM station WHERE lat  <  37.5"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "query": "SELECT count(DISTINCT bike_id) FROM trip"
            },
            {
                "question": "How many different bike ids are there?",
                "query": "SELECT count(DISTINCT bike_id) FROM trip"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "query": "SELECT count(DISTINCT city) FROM station"
            },
            {
                "question": "How many different cities have these stations?",
                "query": "SELECT count(DISTINCT city) FROM station"
            },
            {
                "question": "How many stations does Mountain View city has?",
                "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
            },
            {
                "question": "How many stations are in Mountain View?",
                "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
            },
            {
                "question": "Find the zip code in which the average mean visibility is lower than 10.",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
            },
            {
                "question": "For each zip code, select all those that have an average mean visiblity below 10.",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
            },
            {
                "question": "List all the distinct stations from which a trip of duration below 100 started.",
                "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"
            },
            {
                "question": "What are all the different start station names for a trip that lasted less than 100?",
                "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"
            },
            {
                "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
                "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
            },
            {
                "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
                "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
            }
        ],
        "medium": [
            {
                "question": "For each city, return the highest latitude among its stations.",
                "query": "SELECT city ,  max(lat) FROM station GROUP BY city"
            },
            {
                "question": "For each city, what is the highest latitude for its stations?",
                "query": "SELECT city ,  max(lat) FROM station GROUP BY city"
            },
            {
                "question": "Give me the start station and end station for the trips with the three oldest id.",
                "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
            },
            {
                "question": "What is the station station and end station for the trips with the three smallest ids?",
                "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
            },
            {
                "question": "What is the average latitude and longitude of stations located in San Jose city?",
                "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
            },
            {
                "question": "What is the average latitude and longitude in San Jose?",
                "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
            },
            {
                "question": "What is the id of the trip that has the shortest duration?",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1"
            },
            {
                "question": "What is the id of the shortest trip?",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1"
            },
            {
                "question": "What is the total and maximum duration of trips with bike id 636?",
                "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
            },
            {
                "question": "What is the total and maximum duration for all trips with the bike id 636?",
                "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
            },
            {
                "question": "Return the unique name for stations that have ever had 7 bikes available.",
                "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
            },
            {
                "question": "What are the different names for each station that has ever had 7 bikes available?",
                "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
            },
            {
                "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
                "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
            },
            {
                "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
                "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
            },
            {
                "question": "When and in what zip code did max temperature reach 80?",
                "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
            },
            {
                "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
                "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
            },
            {
                "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
                "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
            },
            {
                "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",
                "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
            },
            {
                "question": "For each zip code, return how many times max wind speed reached 25?",
                "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
            },
            {
                "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
                "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
            },
            {
                "question": "For each trip, return its ending station's installation date.",
                "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
            },
            {
                "question": "What is the installation date for each ending station on all the trips?",
                "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
            },
            {
                "question": "Count the number of trips that did not end in San Francisco city.",
                "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""
            },
            {
                "question": "How many trips did not end in San Francisco?",
                "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\""
            },
            {
                "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
                "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
            },
            {
                "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
                "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
            },
            {
                "question": "What are the name, latitude, and city of the station with the lowest latitude?",
                "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
            },
            {
                "question": "What is the name, latitude, and city of the station that is located the furthest South?",
                "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
            },
            {
                "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
                "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
            },
            {
                "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
                "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
            },
            {
                "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
                "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
            },
            {
                "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
                "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
            },
            {
                "question": "Find the ids and names of stations from which at least 200 trips started.",
                "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
            },
            {
                "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
                "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
            },
            {
                "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
                "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
            },
            {
                "question": "For each city, list their names in decreasing order by their highest station latitude.",
                "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
            },
            {
                "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
                "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
            },
            {
                "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
                "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
            },
            {
                "question": "What are the ids and durations of the trips with the top 3 durations?",
                "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"
            },
            {
                "question": "What are the ids of the trips that lasted the longest and how long did they last?",
                "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"
            },
            {
                "question": "For each station, return its longitude and the average duration of trips that started from the station.",
                "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
            },
            {
                "question": "For each start station id, what is its name, longitude and average duration of trips started there?",
                "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
            },
            {
                "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
                "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
            },
            {
                "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
                "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
            },
            {
                "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
                "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
            },
            {
                "question": "What are the days that had the smallest temperature range, and what was that range?",
                "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
            },
            {
                "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
                "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
            },
            {
                "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
                "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
            },
            {
                "question": "What is the average latitude and longitude of the starting points of all trips?",
                "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
            },
            {
                "question": "What is the average latitude and longitude of all starting stations for the trips?",
                "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
            }
        ],
        "hard": [
            {
                "question": "For each zip code, return the average mean temperature of August there.",
                "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
            },
            {
                "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
                "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
            },
            {
                "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
                "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
            },
            {
                "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
                "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
            },
            {
                "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
                "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
            },
            {
                "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
                "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
            },
            {
                "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
            },
            {
                "question": "What is the zip code that has the lowest average mean sea level pressure?",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
            },
            {
                "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
                "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
            },
            {
                "question": "What is the id of the trip that started from the station with the highest dock count?",
                "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
            },
            {
                "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
                "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
            },
            {
                "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
                "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
            },
            {
                "question": "Find all the zip codes in which the max dew point have never reached 70.",
                "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"
            },
            {
                "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
                "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"
            },
            {
                "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
                "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
            },
            {
                "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
                "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
            },
            {
                "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
            },
            {
                "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
            },
            {
                "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
                "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
            },
            {
                "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
                "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
            }
        ],
        "extra": [
            {
                "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
                "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "What are the start station's name and id for the one that had the most start trips in August?",
                "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "Which bike traveled the most often in zip code 94002?",
                "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "What is the id of the bike that traveled the most in 94002?",
                "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
                "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
            },
            {
                "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
                "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
            },
            {
                "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
                "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
            },
            {
                "question": "What are the 3 most common cloud covers in the zip code of 94107?",
                "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
            },
            {
                "question": "What is the average bike availability in stations that are not located in Palo Alto?",
                "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
            },
            {
                "question": "What is the average bike availablility for stations not in Palo Alto?",
                "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
            },
            {
                "question": "What is the average longitude of stations that never had bike availability more than 10?",
                "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
            },
            {
                "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
                "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
            },
            {
                "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
                "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
            },
            {
                "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
                "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
            },
            {
                "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
                "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
            },
            {
                "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
                "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
            },
            {
                "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
                "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
            },
            {
                "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
                "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
            }
        ]
    },
    "book_2": {
        "easy": [
            {
                "question": "How many books are there?",
                "query": "SELECT count(*) FROM book"
            },
            {
                "question": "List the writers of the books in ascending alphabetical order.",
                "query": "SELECT Writer FROM book ORDER BY Writer ASC"
            },
            {
                "question": "List the titles of the books in ascending order of issues.",
                "query": "SELECT Title FROM book ORDER BY Issues ASC"
            },
            {
                "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
                "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\""
            },
            {
                "question": "What are the dates of publications in descending order of price?",
                "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
            },
            {
                "question": "What are the distinct publishers of publications with price higher than 5000000?",
                "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000"
            },
            {
                "question": "Show publishers that have more than one publication.",
                "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
            },
            {
                "question": "List the writers who have written more than one book.",
                "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1"
            },
            {
                "question": "What is the number of distinct publication dates?",
                "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
            },
            {
                "question": "How many distinct publication dates are there in our record?",
                "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
            }
        ],
        "medium": [
            {
                "question": "What are the title and issues of the books?",
                "query": "SELECT Title ,  Issues FROM book"
            },
            {
                "question": "List the publisher of the publication with the highest price.",
                "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"
            },
            {
                "question": "List the publication dates of publications with 3 lowest prices.",
                "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
            },
            {
                "question": "Show the title and publication dates of books.",
                "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID"
            },
            {
                "question": "Show writers who have published a book with price more than 4000000.",
                "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"
            },
            {
                "question": "Show the titles of books in descending order of publication price.",
                "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
            },
            {
                "question": "Show different publishers together with the number of publications they have.",
                "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
            },
            {
                "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
                "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\""
            }
        ],
        "hard": [
            {
                "question": "Please show the most common publication date.",
                "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "List the titles of books that are not published.",
                "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)"
            },
            {
                "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
                "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"
            }
        ]
    },
    "musical": {
        "easy": [
            {
                "question": "How many actors are there?",
                "query": "SELECT count(*) FROM actor"
            },
            {
                "question": "Count the number of actors.",
                "query": "SELECT count(*) FROM actor"
            },
            {
                "question": "List the name of actors in ascending alphabetical order.",
                "query": "SELECT Name FROM actor ORDER BY Name ASC"
            },
            {
                "question": "What are the names of actors, ordered alphabetically?",
                "query": "SELECT Name FROM actor ORDER BY Name ASC"
            },
            {
                "question": "List the name of actors whose age is not 20.",
                "query": "SELECT Name FROM actor WHERE Age != 20"
            },
            {
                "question": "What are the names of actors who are not 20 years old?",
                "query": "SELECT Name FROM actor WHERE Age != 20"
            },
            {
                "question": "What are the characters of actors in descending order of age?",
                "query": "SELECT Character FROM actor ORDER BY age DESC"
            },
            {
                "question": "Return the characters for actors, ordered by age descending.",
                "query": "SELECT Character FROM actor ORDER BY age DESC"
            },
            {
                "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
                "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
            },
            {
                "question": "Return the names of musicals who have the nominee Bob Fosse.",
                "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
            },
            {
                "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
                "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
            },
            {
                "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
                "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
            },
            {
                "question": "List the nominees that have been nominated more than two musicals.",
                "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
            },
            {
                "question": "Who are the nominees who have been nominated more than two times?",
                "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
            }
        ],
        "medium": [
            {
                "question": "What are the characters and duration of actors?",
                "query": "SELECT Character ,  Duration FROM actor"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "query": "SELECT Character ,  Duration FROM actor"
            },
            {
                "question": "What is the duration of the oldest actor?",
                "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
            },
            {
                "question": "Return the duration of the actor with the greatest age.",
                "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
            },
            {
                "question": "Show names of actors and names of musicals they are in.",
                "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
            },
            {
                "question": "What are the names of actors and the musicals that they are in?",
                "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
            },
            {
                "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
                "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
            },
            {
                "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
                "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
            },
            {
                "question": "Show names of actors in descending order of the year their musical is awarded.",
                "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"
            },
            {
                "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
                "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"
            },
            {
                "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
                "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
            },
            {
                "question": "How many actors have appeared in each musical?",
                "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
            },
            {
                "question": "Show names of musicals which have at least three actors.",
                "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
            },
            {
                "question": "What are the names of musicals who have at 3 or more actors?",
                "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
            },
            {
                "question": "Show different nominees and the number of musicals they have been nominated.",
                "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"
            },
            {
                "question": "How many musicals has each nominee been nominated for?",
                "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"
            },
            {
                "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
                "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
            },
            {
                "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
                "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
            }
        ],
        "hard": [
            {
                "question": "Please show the nominee who has been nominated the greatest number of times.",
                "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "Who is the nominee who has been nominated for the most musicals?",
                "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "List the most common result of the musicals.",
                "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "Return the most frequent result across all musicals.",
                "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "question": "List the name of musicals that do not have actors.",
                "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
            },
            {
                "question": "What are the names of musicals who have no actors?",
                "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
            },
            {
                "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
                "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
            },
            {
                "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
                "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
            }
        ]
    },
    "twitter_1": {
        "easy": [
            {
                "question": "Find the emails of the user named \"Mary\".",
                "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'"
            },
            {
                "question": "What is the partition id of the user named \"Iron Man\".",
                "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'"
            },
            {
                "question": "How many users are there?",
                "query": "SELECT count(*) FROM user_profiles"
            },
            {
                "question": "How many followers does each user have?",
                "query": "SELECT count(*) FROM follows"
            },
            {
                "question": "Find the number of followers for each user.",
                "query": "SELECT count(*) FROM follows GROUP BY f1"
            },
            {
                "question": "Find the number of tweets in record.",
                "query": "SELECT count(*) FROM tweets"
            },
            {
                "question": "Find the number of users who posted some tweets.",
                "query": "SELECT count(DISTINCT UID) FROM tweets"
            },
            {
                "question": "List the text of all tweets in the order of date.",
                "query": "SELECT text FROM tweets ORDER BY createdate"
            }
        ],
        "medium": [
            {
                "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
                "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
            },
            {
                "question": "Return the text of tweets about the topic 'intern'.",
                "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
            },
            {
                "question": "Find the name and email of the users who have more than 1000 followers.",
                "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
            },
            {
                "question": "Find the names of users who have more than one tweet.",
                "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
            },
            {
                "question": "Find the name of the user who has the largest number of followers.",
                "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
            },
            {
                "question": "Find the name and email of the user followed by the least number of people.",
                "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"
            },
            {
                "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
                "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC"
            },
            {
                "question": "List the names of 5 users followed by the largest number of other users.",
                "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
            },
            {
                "question": "Find the name and partition id for users who tweeted less than twice.",
                "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
            },
            {
                "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
                "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
            },
            {
                "question": "Find the maximum and total number of followers of all users.",
                "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
            }
        ],
        "extra": [
            {
                "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
                "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
            },
            {
                "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
                "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"
            },
            {
                "question": "Find the id of users who are followed by Mary and Susan.",
                "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\""
            },
            {
                "question": "Find the average number of followers for the users who do not have any tweet.",
                "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
            }
        ],
        "hard": [
            {
                "question": "Find the id of users who are followed by Mary or Susan.",
                "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
            },
            {
                "question": "Find the average number of followers for the users who had some tweets.",
                "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
            }
        ]
    },
    "product_catalog": {
        "easy": [
            {
                "question": "Find the names of all the catalog entries.",
                "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
            },
            {
                "question": "What are all the catalog entry names?",
                "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
            },
            {
                "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
                "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
            },
            {
                "question": "What are the attribute data types with more than 3 attribute definitions?",
                "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
            },
            {
                "question": "What is the attribute data type of the attribute with name \"Green\"?",
                "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
            },
            {
                "question": "Find the attribute data type for the attribute named \"Green\".",
                "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
            },
            {
                "question": "Find the dates on which more than one revisions were made.",
                "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
            },
            {
                "question": "On which days more than one revisions were made on catalogs.",
                "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
            },
            {
                "question": "How many products are there in the records?",
                "query": "SELECT count(*) FROM catalog_contents"
            },
            {
                "question": "Find the total number of catalog contents.",
                "query": "SELECT count(*) FROM catalog_contents"
            },
            {
                "question": "Name all the products with next entry ID greater than 8.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
            },
            {
                "question": "What are the catalog entry names of the products with next entry ID above 8?",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
            }
        ],
        "medium": [
            {
                "question": "Find the name and level of catalog structure with level between 5 and 10.",
                "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
            },
            {
                "question": "What are the name and level of catalog structure with level number between 5 and 10",
                "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
            },
            {
                "question": "Find all the catalog publishers whose name contains \"Murray\"",
                "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
            },
            {
                "question": "Which catalog publishers have substring \"Murray\" in their names?",
                "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
            },
            {
                "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
                "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
            },
            {
                "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
                "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
            },
            {
                "question": "What is the entry name of the most expensive catalog (in USD)?",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
            },
            {
                "question": "Find the entry name of the catalog with the highest price (in USD).",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
            },
            {
                "question": "What are the average and minimum price (in Euro) of all products?",
                "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
            },
            {
                "question": "Give me the average and minimum price (in Euro) of the products.",
                "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
            },
            {
                "question": "What is the product with the highest height? Give me the catalog entry name.",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
            },
            {
                "question": "Which catalog content has the highest height? Give me the catalog entry name.",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
            },
            {
                "question": "Find the name of the product that has the smallest capacity.",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
            },
            {
                "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
            },
            {
                "question": "Find the names of all the products whose stock number starts with \"2\".",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
            },
            {
                "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
            },
            {
                "question": "Find the names of catalog entries with level number 8.",
                "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
            },
            {
                "question": "What are the names of catalog entries with level number 8?",
                "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
            },
            {
                "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
            },
            {
                "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
            },
            {
                "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
                "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
            },
            {
                "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
                "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
            },
            {
                "question": "Find the name and capacity of products with price greater than 700 (in USD).",
                "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
            },
            {
                "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
                "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
            }
        ],
        "hard": [
            {
                "question": "Which catalog publisher has published the most catalogs?",
                "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Find the catalog publisher that has the most catalogs.",
                "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the level name of the cheapest catalog (in USD)?",
                "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
            },
            {
                "question": "Find the level name of the catalog with the lowest price (in USD).",
                "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
            }
        ],
        "extra": [
            {
                "question": "What are the entry names of catalog with the attribute possessed by most entries.",
                "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "question": "Find the entry names of the catalog with the attribute that have the most entries.",
                "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
            }
        ]
    },
    "flight_1": {
        "easy": [
            {
                "question": "How many aircrafts do we have?",
                "query": "SELECT count(*) FROM Aircraft"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "query": "SELECT count(*) FROM Aircraft"
            },
            {
                "question": "Show ids for all aircrafts with more than 1000 distance.",
                "query": "SELECT aid FROM Aircraft WHERE distance  >  1000"
            },
            {
                "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
                "query": "SELECT aid FROM Aircraft WHERE distance  >  1000"
            },
            {
                "question": "How many aircrafts have distance between 1000 and 5000?",
                "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
            },
            {
                "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
                "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
            },
            {
                "question": "How many employees do we have?",
                "query": "SELECT count(*) FROM Employee"
            },
            {
                "question": "What is the number of employees?",
                "query": "SELECT count(*) FROM Employee"
            },
            {
                "question": "Show ids for all employees with at least 100000 salary.",
                "query": "SELECT eid FROM Employee WHERE salary  >  100000"
            },
            {
                "question": "What is the id of every employee who has at least a salary of  100000?",
                "query": "SELECT eid FROM Employee WHERE salary  >  100000"
            },
            {
                "question": "How many employees have salary between 100000 and 200000?",
                "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
            },
            {
                "question": "What is the number of employees that have a salary between 100000 and 200000?",
                "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
            },
            {
                "question": "How many flights do we have?",
                "query": "SELECT count(*) FROM Flight"
            },
            {
                "question": "What is the number of flights?",
                "query": "SELECT count(*) FROM Flight"
            },
            {
                "question": "Show all flight number from Los Angeles.",
                "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
            },
            {
                "question": "What are the numbers of all flights coming from Los Angeles?",
                "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
            },
            {
                "question": "Show origins of all flights with destination Honolulu.",
                "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
            },
            {
                "question": "What are the origins of all flights that are headed to Honolulu?",
                "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
            },
            {
                "question": "Show flight number for all flights with more than 2000 distance.",
                "query": "SELECT flno FROM Flight WHERE distance  >  2000"
            },
            {
                "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
                "query": "SELECT flno FROM Flight WHERE distance  >  2000"
            },
            {
                "question": "How many employees have certificate.",
                "query": "SELECT count(DISTINCT eid) FROM Certificate"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "query": "SELECT count(DISTINCT eid) FROM Certificate"
            }
        ],
        "medium": [
            {
                "question": "Show name and distance for all aircrafts.",
                "query": "SELECT name ,  distance FROM Aircraft"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "query": "SELECT name ,  distance FROM Aircraft"
            },
            {
                "question": "What is the name and distance for aircraft with id 12?",
                "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
            },
            {
                "question": "What is the name and distance for the aircraft that has an id of 12?",
                "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
            },
            {
                "question": "What is the minimum, average, and maximum distance of all aircrafts.",
                "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
            },
            {
                "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
                "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
            },
            {
                "question": "Show the id and name of the aircraft with the maximum distance.",
                "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
            },
            {
                "question": "What is the id and name of the aircraft that can cover the maximum distance?",
                "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
            },
            {
                "question": "Show the name of aircrafts with top three lowest distances.",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
            },
            {
                "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
            },
            {
                "question": "Show name and salary for all employees sorted by salary.",
                "query": "SELECT name ,  salary FROM Employee ORDER BY salary"
            },
            {
                "question": "What is the name and salary of all employees in order of salary?",
                "query": "SELECT name ,  salary FROM Employee ORDER BY salary"
            },
            {
                "question": "What is the name and salary for employee with id 242518965?",
                "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
            },
            {
                "question": "What is the name and salary of the employee with the id 242518965?",
                "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
            },
            {
                "question": "What is average and maximum salary of all employees.",
                "query": "SELECT avg(salary) ,  max(salary) FROM Employee"
            },
            {
                "question": "What is the average and largest salary of all employees?",
                "query": "SELECT avg(salary) ,  max(salary) FROM Employee"
            },
            {
                "question": "Show the id and name of the employee with maximum salary.",
                "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
            },
            {
                "question": "What is the id and name of the employee with the highest salary?",
                "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
            },
            {
                "question": "Show the name of employees with three lowest salaries.",
                "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
            },
            {
                "question": "What is the name of the 3 employees who get paid the least?",
                "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
            },
            {
                "question": "Show the id and salary of Mark Young.",
                "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
            },
            {
                "question": "What is the id and salary of the employee named Mark Young?",
                "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
            },
            {
                "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
                "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
            },
            {
                "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
                "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
            },
            {
                "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
                "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            },
            {
                "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
                "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            },
            {
                "question": "What is the average price for flights from Los Angeles to Honolulu.",
                "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            },
            {
                "question": "What is the average price for flights from LA to Honolulu?",
                "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            },
            {
                "question": "Show origin and destination for flights with price higher than 300.",
                "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
            },
            {
                "question": "What is the origin and destination for all flights whose price is higher than 300?",
                "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
            },
            {
                "question": "Show the flight number and distance of the flight with maximum price.",
                "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
            },
            {
                "question": "What is the flight number and its distance for the one with the maximum price?",
                "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
            },
            {
                "question": "Show the flight number of flights with three lowest distances.",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
            },
            {
                "question": "What are the numbers of the shortest flights?",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
            },
            {
                "question": "What is the average distance and average price for flights from Los Angeles.",
                "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
            },
            {
                "question": "What is the average distance and price for all flights from LA?",
                "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
            },
            {
                "question": "Show all origins and the number of flights from each origin.",
                "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
            },
            {
                "question": "For each origin, how many flights came from there?",
                "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
            },
            {
                "question": "Show all destinations and the number of flights to each destination.",
                "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"
            },
            {
                "question": "What are the destinations and number of flights to each one?",
                "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"
            },
            {
                "question": "What is the aircraft name for the flight with number 99",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
            },
            {
                "question": "What is the name of the aircraft that was on flight number 99?",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
            },
            {
                "question": "Show all flight numbers with aircraft Airbus A340-300.",
                "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
            },
            {
                "question": "What are the flight numbers for the aircraft Airbus A340-300?",
                "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
            },
            {
                "question": "Show aircraft names and number of flights for each aircraft.",
                "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
            },
            {
                "question": "What is the name of each aircraft and how many flights does each one complete?",
                "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
            },
            {
                "question": "Show names for all aircraft with at least two flights.",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
            },
            {
                "question": "What are the names for all aircrafts with at least 2 flights?",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
            }
        ],
        "hard": [
            {
                "question": "Show names for all aircrafts with distances more than the average.",
                "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
            },
            {
                "question": "What are the names of all aircrafts that can cover more distances than average?",
                "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
            },
            {
                "question": "Show names for all employees with salary more than the average.",
                "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
            },
            {
                "question": "What are the names of all employees who have a salary higher than average?",
                "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
            },
            {
                "question": "Which origin has most number of flights?",
                "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What place has the most flights coming from there?",
                "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Which destination has least number of flights?",
                "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
            },
            {
                "question": "What destination has the fewest number of flights?",
                "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
            },
            {
                "question": "Show ids for all employees who don't have a certificate.",
                "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
            },
            {
                "question": "What are the ids of all employees that don't have certificates?",
                "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
            },
            {
                "question": "Show names for all aircrafts of which John Williams has certificates.",
                "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
            },
            {
                "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
                "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
            },
            {
                "question": "Show names for all employees who have certificate of Boeing 737-800.",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
            },
            {
                "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
            },
            {
                "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
                "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
            },
            {
                "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
                "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
            }
        ],
        "extra": [
            {
                "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""
            },
            {
                "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""
            },
            {
                "question": "Show the name of aircraft which fewest people have its certificate.",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What are the names of the aircraft that the least people are certified to fly?",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
            },
            {
                "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
            },
            {
                "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
                "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
                "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
            }
        ]
    },
    "allergy_1": {
        "easy": [
            {
                "question": "How many allergies are there?",
                "query": "SELECT count(DISTINCT allergy) FROM Allergy_type"
            },
            {
                "question": "How many allergy entries are there?",
                "query": "SELECT count(DISTINCT allergy) FROM Allergy_type"
            },
            {
                "question": "How many different allergy types exist?",
                "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
            },
            {
                "question": "How many distinct allergies are there?",
                "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
            },
            {
                "question": "Show all allergy types.",
                "query": "SELECT DISTINCT allergytype FROM Allergy_type"
            },
            {
                "question": "What are the different allergy types?",
                "query": "SELECT DISTINCT allergytype FROM Allergy_type"
            },
            {
                "question": "Show all allergies with type food.",
                "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
            },
            {
                "question": "What are all the different food allergies?",
                "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
            },
            {
                "question": "What is the type of allergy Cat?",
                "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
            },
            {
                "question": "What is allergy type of a cat allergy?",
                "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
            },
            {
                "question": "How many allergies have type animal?",
                "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
            },
            {
                "question": "How many animal type allergies exist?",
                "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
            },
            {
                "question": "How many students are there?",
                "query": "SELECT count(*) FROM Student"
            },
            {
                "question": "What is the total number of students?",
                "query": "SELECT count(*) FROM Student"
            },
            {
                "question": "How many different advisors are listed?",
                "query": "SELECT count(DISTINCT advisor) FROM Student"
            },
            {
                "question": "How many advisors are there?",
                "query": "SELECT count(DISTINCT advisor) FROM Student"
            },
            {
                "question": "Show all majors.",
                "query": "SELECT DISTINCT Major FROM Student"
            },
            {
                "question": "What are the different majors?",
                "query": "SELECT DISTINCT Major FROM Student"
            },
            {
                "question": "Show all cities where students live.",
                "query": "SELECT DISTINCT city_code FROM Student"
            },
            {
                "question": "What cities do students live in?",
                "query": "SELECT DISTINCT city_code FROM Student"
            },
            {
                "question": "Show student ids for all male students.",
                "query": "SELECT StuID FROM Student WHERE Sex  =  'M'"
            },
            {
                "question": "What are the student ids for all male students?",
                "query": "SELECT StuID FROM Student WHERE Sex  =  'M'"
            },
            {
                "question": "How many students are age 18?",
                "query": "SELECT count(*) FROM Student WHERE age  =  18"
            },
            {
                "question": "How many students are 18 years old?",
                "query": "SELECT count(*) FROM Student WHERE age  =  18"
            },
            {
                "question": "Show all student ids who are older than 20.",
                "query": "SELECT StuID FROM Student WHERE age  >  20"
            },
            {
                "question": "What are the student ids for students over 20 years old?",
                "query": "SELECT StuID FROM Student WHERE age  >  20"
            },
            {
                "question": "Which city does the student whose last name is \"Kim\" live in?",
                "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
            },
            {
                "question": "Give the city that the student whose family name is Kim lives in.",
                "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
            },
            {
                "question": "Who is the advisor of student with ID 1004?",
                "query": "SELECT Advisor FROM Student WHERE StuID  =  1004"
            },
            {
                "question": "Who advises student 1004?",
                "query": "SELECT Advisor FROM Student WHERE StuID  =  1004"
            },
            {
                "question": "How many students have cat allergies?",
                "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
            },
            {
                "question": "How many students are affected by cat allergies?",
                "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
            },
            {
                "question": "Show all student IDs who have at least two allergies.",
                "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
            },
            {
                "question": "What are the students ids of students who have more than one allergy?",
                "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
            }
        ],
        "medium": [
            {
                "question": "Show all allergies and their types.",
                "query": "SELECT allergy ,  allergytype FROM Allergy_type"
            },
            {
                "question": "What are the allergies and their types?",
                "query": "SELECT allergy ,  allergytype FROM Allergy_type"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
            },
            {
                "question": "Show first name and last name for all students.",
                "query": "SELECT Fname ,  Lname FROM Student"
            },
            {
                "question": "What are the full names of all students",
                "query": "SELECT Fname ,  Lname FROM Student"
            },
            {
                "question": "Show first name, last name, age for all female students. Their sex is F.",
                "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
            },
            {
                "question": "What are the full names and ages for all female students whose sex is F?",
                "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
            },
            {
                "question": "How many students live in HKG or CHI?",
                "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
            },
            {
                "question": "Give the number of students living in either HKG or CHI.",
                "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
            },
            {
                "question": "Show the minimum, average, and maximum age of all students.",
                "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
            },
            {
                "question": "What is the minimum, mean, and maximum age across all students?",
                "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
            },
            {
                "question": "How many students are there for each major?",
                "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
            },
            {
                "question": "Show all ages and corresponding number of students.",
                "query": "SELECT age ,  count(*) FROM Student GROUP BY age"
            },
            {
                "question": "How old is each student and how many students are each age?",
                "query": "SELECT age ,  count(*) FROM Student GROUP BY age"
            },
            {
                "question": "Show the average age for male and female students.",
                "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
            },
            {
                "question": "What are the average ages for male and female students?",
                "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
            },
            {
                "question": "Show all cities and corresponding number of students.",
                "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
            },
            {
                "question": "How many students live in each city?",
                "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
            },
            {
                "question": "Show all advisors and corresponding number of students.",
                "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
            },
            {
                "question": "How many students does each advisor have?",
                "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
            },
            {
                "question": "How many students have a food allergy?",
                "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
            },
            {
                "question": "How many students are affected by food related allergies?",
                "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
            },
            {
                "question": "Show all allergies with number of students affected.",
                "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
            },
            {
                "question": "How many students have each different allergy?",
                "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
            },
            {
                "question": "Show all allergy type with number of students affected.",
                "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
            },
            {
                "question": "How many students are affected by each allergy type?",
                "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
            }
        ],
        "hard": [
            {
                "question": "Which allergy type has most number of allergies?",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Which allergy type is most common?",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Which allergy type has least number of allergies?",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "question": "Which allergy type is the least common?",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "question": "What is the last name of the youngest student?",
                "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
            },
            {
                "question": "Provide the last name of the youngest student.",
                "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
            },
            {
                "question": "Show the student id of the oldest student.",
                "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
            },
            {
                "question": "What student id corresponds to the oldest student?",
                "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
            },
            {
                "question": "Which major has most number of students?",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What is the largest major?",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Which advisor has most number of students?",
                "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Give the advisor with the most students.",
                "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "What are the student ids of students who don't have any allergies?",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
            },
            {
                "question": "Which students are unaffected by allergies?",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
            },
            {
                "question": "How many female students have milk or egg allergies?",
                "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
            },
            {
                "question": "How many students who are female are allergic to milk or eggs?",
                "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
            },
            {
                "question": "Which allergy has most number of students affected?",
                "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Which allergy is the most common?",
                "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "question": "Find the average age of the students who have allergies with food and animal types.",
                "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
            },
            {
                "question": "How old are the students with allergies to food and animal types on average?",
                "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
            },
            {
                "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
                "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
            },
            {
                "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
                "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
            }
        ],
        "extra": [
            {
                "question": "Find the last name and age of the student who has allergy to both milk and cat.",
                "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            },
            {
                "question": "What are the last names and ages of the students who are allergic to milk and cat?",
                "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            },
            {
                "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
                "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
            },
            {
                "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
                "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
            },
            {
                "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
                "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            },
            {
                "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
                "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            },
            {
                "question": "List the first and last name of the students who do not have any food type allergy.",
                "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
            },
            {
                "question": "What is the full name of each student who is not allergic to any type of food.",
                "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
            },
            {
                "question": "Find the number of male (sex is 'M') students who have some food type allery.",
                "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
            },
            {
                "question": "How many male students (sex is 'M') are allergic to any type of food?",
                "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
            },
            {
                "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
                "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
            },
            {
                "question": "How many students are over 18 and do not have allergy to food type or animal type?",
                "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
            },
            {
                "question": "Find the first name and major of the students who are not allegry to soy.",
                "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
            },
            {
                "question": "What are the first name and major of the students who are able to consume soy?",
                "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
            }
        ]
    }
}